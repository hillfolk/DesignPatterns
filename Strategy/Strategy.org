# -*- mode: org; -*-
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything

#+TITLE: Strategy

#+Date: 2019-03-15

#+Author: Hillfolk

알고리즘을 챕슐화 하여 이들을 상호교환이 가능하도록 만들어주는 패턴 객체의 알고리즘을 다양한게 변할수 있도록 함

   설명

   - 사용 사례
     실시간 데이터 처리를 위한 알고리즘에서 다양한 데이터 처리 알고리즘을 적용하기 위하여 해당 패턴을 적용하였다. 
     중요한 부분은 알고리즘의 행위를 정확하게 정의하여 인터페이스를 구축해야 한다. 

** UML
   - Picture
    [[./Strategy.png]]
   
   - 구성원
     * Strategy Interface
       알고리즘에 대한 공통연산을 정의한 인터페이스로 이 인터페이스를 통해서 실제 알고리즘을 유연하게 적용할수 있다. 
       설계시에는 적절하고 공통적인 메소드를 구성해야만 변경 사항에 대해서 적절하게 대응할 수 있다.

     * ConcreteStrategy
       Strategy 인터페이스에 대한 실제 알고리즘 구현입니다.

     * Context
        ConcerteStrategy 객체를 통해 구서오디며 Strategy 객체에 대한 참조를 관리하며 실제로는 Strategy 객체에 알고리즘 처리에 필요한 데이터를 전달하는 역할을 수행
       

     
   


** CODE

*** TODO Pascal 
*** TODO Java
*** TODO Go
*** TODO [[./Python/strategy.py][Python]]
